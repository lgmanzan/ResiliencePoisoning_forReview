idTestCase,code
1,"main ()
{
struct fakeint {
	short f0;
	short zeros;
};
struct fakeint strange;
struct fakeint strange2;
strange.f0=-240;
strange2.f0=240;
strange2.zeros=0;
strange.zeros=0;
printf("%d %d\n",strange.f0,strange);
printf("%d %d\n",strange2.f0,strange2);
}"
3,"#include <stdio.h>
int main() {
int value;
value = (int)(~((int)0) ^ (1 << (sizeof(int)*8)));
printf("Max unsigned int: %u %1$x\nNow signed: %1$d %1$x\n",
value);
return
}"
4,"#include <stdio.h>
#include <string.h>
int main() {
char longString[] = "Cellular bananular phone";
char shortString[16];
strncpy(shortString, longString, 16);
printf("The last character in shortString is: %c %1$x\n",
shortString[15]);
return (0);
}"
5,"#include <stdio.h>
#include <strings.h>
#include <wchar.h>
int main() {
wchar_t wideString[] = L"The spazzy orange tiger jumped ” \
“over the tawny jaguar.";
wchar_t *newString;
newString = (wchar_t *) malloc(strlen(wideString));
printf("Strlen() output: %d\nWcslen() output: %d\n",
strlen(wideString), wcslen(wideString));
}"
6,"#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#define BUFSIZER1 512
#define BUFSIZER2 ((BUFSIZER1/2) - 8)
int main(int argc, char **argv) {
char *buf1R1;
char *buf2R1;
char *buf2R2;
char *buf3R2;
buf1R1 = (char *) malloc(BUFSIZER1);
buf2R1 = (char *) malloc(BUFSIZER1);
free(buf2R1);
buf2R2 = (char *) malloc(BUFSIZER2);
buf3R2 = (char *) malloc(BUFSIZER2);
strncpy(buf2R1, argv[1], BUFSIZER1-1);
free(buf1R1);
free(buf2R2);
free(buf3R2);
}"
7,"void example(char *s) {
char buf[1024];
strcpy(buf, s);
}
int main(int argc, char **argv) {
example(argv[1]);
}"
8,"#include <stdio.h>
#include <unistd.h>
#define BUFSIZE1 512
#define BUFSIZE2 ((BUFSIZE1/2) - 8)
int main(int argc, char **argv) {
char *buf1R1;
char *buf2R1;
char *buf1R2;
buf1R1 = (char *) malloc(BUFSIZE2);
buf2R1 = (char *) malloc(BUFSIZE2);
free(buf1R1);
free(buf2R1);
buf1R2 = (char *) malloc(BUFSIZE1);
strncpy(buf1R2, argv[1], BUFSIZE1-1);
free(buf2R1);
free(buf1R2);
}"
10,"#include <stdio.h>
int main(int argc, char **argv) {
char buf[5012];
memcpy(buf, argv[1], 5012);
printf(argv[1]);  
return (0);
}"
11,"#include <stdio.h>
#include <unistd.h>
int main(int argc, char **argv) {
char cat[] = "cat ";
char *command;
size_t commandLength;
commandLength = strlen(cat) + strlen(argv[1]) + 1;
command = (char *) malloc(commandLength);
strncpy(command, cat, commandLength);
strncat(command, argv[1], (commandLength - strlen(cat)) );
system(command);
return (0);
}"
13,"#define BUFSIZE 256
int main(int argc, char **argv) {
char *buf1 = (char *) malloc(BUFSIZE);
char *buf2 = (char *) malloc(BUFSIZE);
strcpy(buf1, argv[1]);
free(buf2);
}"
14,"#define BUFSIZE 256
int main(int argc, char **argv) {
char buf[BUFSIZE];
strcpy(buf, argv[1]);
}"
15,"#define BUFSIZE 256
int main(int argc, char **argv) {
char *buf;
buf = (char *)malloc(BUFSIZE);
strcpy(buf, argv[1]);
}"
16,"#include <iostream>
#include <string>
using namespace std;
int main() {
char destBuf[1024],srcBuf[1024];
string s1 = "This string is fair short.";
srcBuf[0]='\0';
strncpy(destBuf, &srcBuf[s1.find("abc")], 100); 
}"
19,"#include <stdio.h>
int main() {
int value;
value = (int)(~((int)0) ^ (1 << (sizeof(int)*8)));
printf("Max unsigned int: %u %1$x\nNow signed: %1$d %1$x\n",
value);
return (0);
}"
20,"#include <stdio.h>
int main() {
int intPrimitive;
short shortPrimitive;
intPrimitive = (int)(~((int)0) ^ (1 << (sizeof(int)*8-1)));
shortPrimitive = intPrimitive;
printf("Int MAXINT: %d\nShort MAXINT: %d\n",
intPrimitive, shortPrimitive);
return (0);
}"
22,"main()
}
char a;
char b;
*(&a + 1) = 0;
}"
35,"static void print(char * string) {
char * word;
int counter;
fflush(stdout);
for(word = string; counter = *word++; ) putc(counter, stdout);
}
int main(void) {
pid_t pid;
if( (pid = fork()) < 0) exit(-2);
else if( pid == 0) print("child");
else print("parent\n");
exit(0);
}"
38,"#include <sys/types.h>
#include <sys/stat.h>
int main(argc,argv){
struct stat *sb;
time_t timer;
lstat("bar.sh",sb);
printf("%d\n",sb->st_ctime);
switch(sb->st_ctime % 2){
case 0: printf("One option\n");break;
case 1: printf("another option\n");break;
default: printf("huh\n");break;
}
return 0;
}"
39,"#include <signal.h>
#include <syslog.h>
#include <string.h>
#include <stdlib.h>
void *global1, *global2;
char *what;
void sh(int dummy) {
syslog(LOG_NOTICE,"%s\n",what);
free(global2);
free(global1);
sleep(10);
exit(0);
}
int main(int argc,char* argv[]) {
what=argv[1];
global1=strdup(argv[2]);
global2=malloc(340);
signal(SIGHUP,sh);
signal(SIGTERM,sh);
sleep(10);
exit(0);
}"
40,"#include <stdio.h>
#include <string.h>
int main()
{
	char password[256];
	gets(password);
	if (strcmp(password,”68af404b513073584c4b6f22b6c63e6b”)) 
		{
		printf(“Incorrect Password!\n”);
		return 0;
		}
	printf(“Entering Diagnostic Mode…\n”);
	return 1;
}"
54,"#include <openssl/sha.h>
#include <stdio.h>
#include <string.h>
#include <memory.h>
int main(){
char *paragraph = NULL;
char *data = NULL;
char *nonce = “bad“;
char *password = “secret”;
parsize=strlen(nonce)+strlen(password);
paragraph=(char*)malloc(para_size);
strncpy(paragraph,nonce,strlen(nonce));
strcpy(paragraph,password,strlen(password));
data=(unsigned char*)malloc(20);
SHA1((const unsigned char*)paragraph,parsize,(unsigned
char*)data);
free(paragraph);
free(data);
return 0;
}"
57,"#include <openssl/evp.h>
main()
{
EVP_CIPHER_CTX ctx;
char key[EVP_MAX_KEY_LENGTH];
char iv[EVP_MAX_IV_LENGTH];
RAND_bytes(key, b);
memset(iv,0,EVP_MAX_IV_LENGTH);
EVP_EncryptInit(&ctx,EVP_bf_cbc(), key,iv);
return;
}"
58,"public class SymmetricCipherTest {
public static void main() {
byte[] text =”Secret".getBytes();
byte[] iv ={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
KeyGenerator kg = KeyGenerator.getInstance("DES");
kg.init(56);
SecretKey key = kg.generateKey();
Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
IvParameterSpec ips = new IvParameterSpec(iv);
cipher.init(Cipher.ENCRYPT_MODE, key, ips);
return cipher.doFinal(inpBytes);
}
}"
69,"#include <stdio.h>
#include <string.h>
int main()
{
	char password[256];
	gets(password);
if (strcmp(password, “Mew!”)) {
printf(“Incorrect Password!\n”);
return(0)
}
printf(“Entering Diagnostic Mode…\n”);
return(1);
}"
71,"{
int month = 8;
switch (month) {
case 1: print("January");
case 2: print("February");
case 3: print("March");
case 4: print("April");
case 5: println("May");
case 6: print("June");
case 7: print("July");
case 8: print("August");
case 9: print("September");
case 10: print("October");
case 11: print("November");
case 12: print("December");
}
println(" is a great month");
}"
72,"#include <iostream.h>
#include <new>
#include <stdlib.h>
int
main(){
char input[100];
int i, n;
long *l;
cout << "How many numbers do you want to type in? ";
cin.getline(input, 100);
i = atoi(input);
	l = new long [i];
if (l == NULL)
	exit(1);
for (n = 0; n < i; n++) {
	cout << "Enter number: ";
	cin.getline(input, 100);
	l[n] = atol(input);
}
cout << "You have entered: ";
for (n = 0; n < i; n++)
	cout << l[n] << ", ";
delete[] l;
return 0;
}"
73,"main ()
{
foo=malloc(sizeof(char);
if (foo==0) {
printf("foo==0\n");
}"
74,"main ()
{
malloc(sizeof(int)*4);
}"
75,"int main (void)
{
FILE *stream;
char tempstring[] = "String to be written";
if( (stream = tmpfile()) == NULL ) {
perror("Could not open new temporary file\n");
return (-1);
}
printf( "Temporary file %d was created\n"); 
_rmtmp();
}"
76,"void some_function(int foo, int bar, int xi) {
	int a[3], i;
	va_list ap;
	va_start(ap, foo);
	for (i = 0; i < sizeof(a) / sizeof(int); i++)
		a[i] = va_arg(ap, int);
	va_end(ap);
}
int main(int argc, char *argv[]) {
	some_function(17, 42);
}"
77,"main ()
{
if (malloc(sizeof(int*4) < 0 )
perror(“Failure”); 
}"
78,"main ()
{
int foo;
if (foo==0) printf("foo= 0");
}"
79,"main ()
{
char *foo;
int counter;
foo=malloc(sizeof(char)*10);
for (counter=0;counter!=14;counter++){
foo[counter]='a';
printf("%s\n",foo);
}"
80,"main ()
{
char *foo;
foo=malloc(sizeof(char)*4);
foo[0]='a';
foo[1]='a';
foo[2]=0;
foo[3]='c';
printf("%c %c %c %c %c \n",foo[0],foo[1],foo[2],foo[3]);
printf("%s\n",foo);
}"
81,"#include <stdiob.h>
int main(){
void *foo;
printf("%d\n",sizeof(foo)); 
return 0;
}"
82,"#include <stdiob.h>
int main(){
int *p = x;
char * second_char = (char *)(p + 1);
printf ("%s", second_char);
}"
88,"#include <stdio.h>
#include <string.h>
#define	MAXSIZE		40
void test( void )
{
  char buf[MAXSIZE], * p, ch;
  p = buf;
  while ( ( ch = getc( stdin ) ) != EOF && ch != '\n' )
    * p++ = ch;
  * p++ = 0;
  printf( "result: %s\n", buf );
}
int main( int argc, char * * argv )
{
  test();
  return 0;
}"
89,"#include <stdio.h>
#include <string.h>
#define	MAXSIZE		40
void
test(char *str)
{
	char buf[MAXSIZE], *p;
	p = buf;
	while((*p++ = *str++))				
		continue;
	printf("result: %s\n", buf);
}
int
main(int argc, char **argv)
{
	char *userstr;
	if(argc > 1) {
		userstr = argv[1];
		test(userstr);
	}
	return 0;
}"
91,"#include <fcntl.h>
#include <unistd.h>
#define DIR	"/tmp"
#define FILE	"/etc/passwd"
void test(char *str)
{
	int fd;
	if(chroot(DIR) < 0)
		return;
	fd = open(FILE, O_RDONLY);		
	if(fd >= 0) {
		if(close(fd) < 0)
			;
	}
}
int main(int argc, char **argv)
{
	char *userstr;
	if(argc > 1) {
		userstr = argv[1];
		test(userstr);
	}
	return 0;
}"
92,"#include <stdio.h>
void
test(char *str)
{
	printf(str);				
}
int
main(int argc, char **argv)
{
	char *userstr;
	if(argc > 1) {
		userstr = argv[1];
		test(userstr);
	}
	return 0;
}"
93,"#include <syslog.h>
void
test(char *str)
{
	syslog(LOG_CRIT, str);			
}
int
main(int argc, char **argv)
{
	char *userstr;
	if(argc > 1) {
		userstr = argv[1];
		test(userstr);
	}
	return 0;
}"
94,"#include <stdlib.h>
#include <stdio.h>
int main(int argc, char **argv)
{
	char buffer [15] = "Hello World";
        int int1=1, int2=2;
        return 1;
}"
95,"#include <stdio.h>
#include <string.h>
#define	MAXSIZE		40
void
test(void)
{
	char buf[MAXSIZE];
	if(gets(buf))					
		printf("result: %s\n", buf);
}
int
main(int argc, char **argv)
{
	test();
	return 0;
}"
96,"#include <stdio.h>
#include <string.h>
#define	MAXSIZE		40
void
test(void)
{
	char buf[MAXSIZE];
	if(fgets(buf, 1024, stdin))			
		printf("result: %s\n", buf);
}
int
main(int argc, char **argv)
{
	test();
	return 0;
}"
97,"#include <stdio.h>
#include <stdlib.h>
void
test(unsigned int n)
{
	int *buf, i;
	buf = malloc(n * sizeof *buf);		
	if(!buf)
		return;
	for(i = 0; i < n; i++)
		buf[i] = i;			
	while(i-- > 0)
		printf("%x ", buf[i]);		
	printf("\n");
	free(buf);
}
int
main(int argc, char **argv)
{
	int n;
	if(argc != 2)
		return 1;
	n = strtoul(argv[1], 0, 10);
	test(n);
	return 0;
}"
98,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
void
test(char *str)
{
	char *p;
	p = strdup(str);
	if(p)
		printf("result: %s\n", p);
	return;					
}
int
main(int argc, char **argv)
{
	char *userstr;
	if(argc > 1) {
		userstr = argv[1];
		test(userstr);
	}
	return 0;
}"
99,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
void
test(char *str)
{
	char *p;
	p = strdup(str);
	if(p) {
		printf("result: %s\n", p);
		free(p);
		free(p);			
	}
}
int
main(int argc, char **argv)
{
	char *userstr;
	if(argc > 1) {
		userstr = argv[1];
		test(userstr);
	}
	return 0;
}"
100,"#include <stdio.h>
#include <string.h>
#define	MAXSIZE		32
void
test(char *str)
{
	char buf3[MAXSIZE];
	char buf2[MAXSIZE];
	char buf1[MAXSIZE];
	strncpy(buf1, str, sizeof buf1);
	strncpy(buf2, "This is a Test string", sizeof buf2);
	strcpy(buf3, buf1);			
	printf("result: %s\n", buf3);
}
int
main(int argc, char **argv)
{
	char *userstr;
	if(argc > 1) {
		userstr = argv[1];
		test(userstr);
	}
	return 0;
}"
101,"#include <stdio.h>
#include <string.h>
#include <unistd.h>
#define	MAXSIZE		32
void
test(void)
{
	char buf2[MAXSIZE];
	char buf1[MAXSIZE];
	int n;
	n = read(0, buf1, sizeof buf1);
	strcpy(buf2, buf1);				
	printf("result: %s\n", buf2);
}
int
main(int argc, char **argv)
{
	test();
	return 0;
}"
102,"#include <sys/types.h>
#include <fcntl.h>
#include <unistd.h>
#define FILE	"/tmp/myfile"
#define	UID	100
void
test(char *str)
{
	int fd;
	fd = creat(FILE, 0644);
	if(fd == -1)
		return;
	if(chown(FILE, UID, -1) < 0)		
		;
	if(close(fd) < 0)
		;
}
int
main(int argc, char **argv)
{
	char *userstr;
	if(argc > 1) {
		userstr = argv[1];
		test(userstr);
	}
	return 0;
}"
103,"#include <stdio.h>
#include <string.h>
#define	MAXSIZE		40
void
test(char *str)
{
	char buf[MAXSIZE];
	strcpy(buf, str);				
	printf("result: %s\n", buf);
}
int
main(int argc, char **argv)
{
	char *userstr;
	if(argc > 1) {
		userstr = argv[1];
		test(userstr);
	}
	return 0;
}"
104,"#include <stdio.h>
#include <string.h>
#define	MAXSIZE		5
void
test(char *str)
{
	char buf[MAXSIZE];
	if(strlen(str) > MAXSIZE)
		return;
	strcpy(buf, str);				
	printf("result: %s\n", buf);
}
int
main(int argc, char **argv)
{
	char *userstr;
	if(argc > 1) {
		userstr = argv[1];
		test(userstr);
	}
	return 0;
}"
105,"#include <stdio.h>
#include <string.h>
#define	MAXSIZE		40
void
test(char *str)
{
	char buf[MAXSIZE];
	snprintf(buf, 1024, "<%s>", str);	
	printf("result: %s\n", buf);
}
int
main(int argc, char **argv)
{
	char *userstr;
	if(argc > 1) {
		userstr = argv[1];
		test(userstr);
	}
	return 0;
}"
106,"#include <stdio.h>
#include <string.h>
#define	MAXSIZE		40
void
test(char *str)
{
	char buf[MAXSIZE];
	snprintf(buf, 1024, "<%s>", str);	
	printf("result: %s\n", buf);
}
int
main(int argc, char **argv)
{
	test("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
	return 0;
}"
107,"#include <stdio.h>
#include <string.h>
#define	MAXSIZE		40
void
test(char *str)
{
	char buf[MAXSIZE];
	snprintf(buf, 1024, "<%35s>", str);	
	printf("result: %s\n", buf);
}
int
main(int argc, char **argv)
{
	char *userstr;
	if(argc > 1) {
		userstr = argv[1];
		test(userstr);
	}
	return 0;
}"
108,"#include <stdio.h>
#include <string.h>
#define	MAXSIZE		40
void
test(char *str1, char *str2)
{
	char buf[MAXSIZE];
	char *p;
	int l, x;
	p = buf;
	l = sizeof buf;
	snprintf(p, l, "<%s>", str1);
	x = strlen(p);
	p += x;
	l -= x;
	*p++ = ' ';					
	*p++ = '-';					
	l -= 2;						
	snprintf(p, l, "<%s>\n", str2);			
	x = strlen(p);
	p += x;
	l -= x;
	printf("result: %s\n", buf);
}
int
main(int argc, char **argv)
{
	char *userstr, *userstr2;
	if(argc > 2) {
		userstr = argv[1];
		userstr2 = argv[2];
		test(userstr, userstr2);
	}
	return 0;
}"
109,"#include <stdio.h>
#include <string.h>
#define	MAXSIZE		40
void
test(char *str)
{
	char buf[MAXSIZE];
	sprintf(buf, "<%s>", str);		
	printf("result: %s\n", buf);
}
int
main(int argc, char **argv)
{
	char *userstr;
	if(argc > 1) {
		userstr = argv[1];
		test(userstr);
	}
	return 0;
}"
110,"#include <stdio.h>
#include <string.h>
#define	MAXSIZE		5
void
test(char *str)
{
	char buf[MAXSIZE];
	sprintf(buf, "<%.5s>", str);		
	printf("result: %s\n", buf);
}
int
main(int argc, char **argv)
{
	char *userstr;
	if(argc > 1) {
		userstr = argv[1];
		test(userstr);
	}
	return 0;
}"
111,"#include <stdio.h>
#include <stdlib.h>
#define	MAXSIZE		40
void
test(char *str)
{
	char buf[MAXSIZE];
	snprintf(buf, sizeof buf, "/bin/echo %s", str);
	system(buf);				
}
int
main(int argc, char **argv)
{
	char *userstr;
	if(argc > 1) {
		userstr = argv[1];
		test(userstr);
	}
	return 0;
}"
112,"#include <stdio.h>
#include <unistd.h>
#define	MAXSIZE		40
void
test(char *str)
{
	char buf[MAXSIZE];
	int x;
	snprintf(buf, sizeof buf, "/usr/games/%s", str);
	x = execl(buf, str, 0);			
	if(x < 0)
		;
}
int
main(int argc, char **argv)
{
	char *userstr;
	if(argc > 1) {
		userstr = argv[1];
		test(userstr);
	}
	return 0;
}"
113,"#include <stdio.h>
#include <unistd.h>
void
test(void)
{
	char *pass;
	pass = getpass("Password: ");
	if(pass) 
		printf("I see <%s>\n", pass);		
}
int
main(int argc, char **argv)
{
	test();
	return 0;
}"
114,"#include <unistd.h>
#include <syslog.h>
void
test(void)
{
	char *pass;
	pass = getpass("Password: ");
	if(pass) 
		syslog(LOG_DEBUG, "user gave us <%s>\n", pass);	
}
int
main(int argc, char **argv)
{
	test();
	return 0;
}"
115,"int main(int argc, char *argv[])
{
  char buf[10];
  buf[4105] = 'A';
  return 0;
}"
116,"int main(int argc, char *argv[])
{
  char buf[10];
  buf[17] = 'A';
  return 0;
}"
117,"int main(int argc, char *argv[])
{
  char buf[10];
  buf[10] = 'A';
  return 0;
}"
118,"int main(int argc, char *argv[])
{
  char buf[10];
  buf[9] = 'A';
  return 0;
}"
119,"int main(int argc, char *argv[])
{
  char read_value;
  char buf[10];
  read_value = buf[4105];
  return 0;
}"
120,"int main(int argc, char *argv[])
{
  char read_value;
  char buf[10];
  read_value = buf[17];
  return 0;
}"
121,"int main(int argc, char *argv[])
{
  char read_value;
  char buf[10];
  read_value = buf[10];
  return 0;
}"
122,"int main(int argc, char *argv[])
{
  char read_value;
  char buf[10];
  read_value = buf[9];
  return 0;
}"
123,"int main(int argc, char *argv[])
{
  char buf[10];
  buf[-4096] = 'A';
  return 0;
}"
124,"int main(int argc, char *argv[])
{
  char buf[10];
  buf[-8] = 'A';
  return 0;
}"
125,"int main(int argc, char *argv[])
{
  char buf[10];
  buf[-1] = 'A';
  return 0;
}"
126,"int main(int argc, char *argv[])
{
  char buf[10];
  buf[0] = 'A';
  return 0;
}"
127,"int main(int argc, char *argv[])
{
  int buf[10];
  buf[4105] = 55;
  return 0;
}"
128,"int main(int argc, char *argv[])
{
  int buf[10];
  buf[17] = 55;
  return 0;
}"
129,"int main(int argc, char *argv[])
{
  int buf[10];
  buf[10] = 55;
  return 0;
}"
130,"int main(int argc, char *argv[])
{
  int buf[10];
  buf[9] = 55;
  return 0;
}"
131,"int main(int argc, char *argv[])
{
  float buf[10];
  buf[4105] = 55.55;
  return 0;
}"
132,"int main(int argc, char *argv[])
{
  float buf[10];
  buf[17] = 55.55;
  return 0;
}"
133,"int main(int argc, char *argv[])
{
  float buf[10];
  buf[10] = 55.55;
  return 0;
}"
134,"int main(int argc, char *argv[])
{
  float buf[10];
  buf[9] = 55.55;
  return 0;
}"
135,"#include <wchar.h>
int main(int argc, char *argv[])
{
  wchar_t buf[10];
  buf[4105] = L'A';
  return 0;
}"
136,"#include <wchar.h>
int main(int argc, char *argv[])
{
  wchar_t buf[10];
  buf[17] = L'A';
  return 0;
}"
137,"#include <wchar.h>
int main(int argc, char *argv[])
{
  wchar_t buf[10];
  buf[10] = L'A';
  return 0;
}"
138,"#include <wchar.h>
int main(int argc, char *argv[])
{
  wchar_t buf[10];
  buf[9] = L'A';
  return 0;
}"
139,"int main(int argc, char *argv[])
{
  char * buf[10];
  buf[4105] = "A";
  return 0;
}"
140,"int main(int argc, char *argv[])
{
  char * buf[10];
  buf[17] = "A";
  return 0;
}"
141,"int main(int argc, char *argv[])
{
  char * buf[10];
  buf[10] = "A";
  return 0;
}"
142,"int main(int argc, char *argv[])
{
  char * buf[10];
  buf[9] = "A";
  return 0;
}"
143,"int main(int argc, char *argv[])
{
  unsigned int buf[10];
  buf[4105] = 55;
  return 0;
}"
144,"int main(int argc, char *argv[])
{
  unsigned int buf[10];
  buf[17] = 55;
  return 0;
}"
145,"int main(int argc, char *argv[])
{
  unsigned int buf[10];
  buf[10] = 55;
  return 0;
}"
146,"int main(int argc, char *argv[])
{
  unsigned int buf[10];
  buf[9] = 55;
  return 0;
}"
147,"int main(int argc, char *argv[])
{
  unsigned char buf[10];
  buf[4105] = 'A';
  return 0;
}"
148,"int main(int argc, char *argv[])
{
  unsigned char buf[10];
  buf[17] = 'A';
  return 0;
}"
149,"int main(int argc, char *argv[])
{
  unsigned char buf[10];
  buf[10] = 'A';
  return 0;
}"
150,"int main(int argc, char *argv[])
{
  unsigned char buf[10];
  buf[9] = 'A';
  return 0;
}"
151,"#include <stdlib.h>
#include <assert.h>
int main(int argc, char *argv[])
{
  char * buf;
  buf = (char *) malloc(10 * sizeof(char));
  assert (buf != NULL);
  buf[4105] = 'A';
  return 0;
}"
152,"#include <stdlib.h>
#include <assert.h>
int main(int argc, char *argv[])
{
  char * buf;
  buf = (char *) malloc(10 * sizeof(char));
  assert (buf != NULL);
  buf[17] = 'A';
  return 0;
}"
